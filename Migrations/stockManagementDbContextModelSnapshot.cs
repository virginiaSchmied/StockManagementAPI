// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockManagementAPI.DataAccess;

#nullable disable

namespace StockManagementAPI.Migrations
{
    [DbContext(typeof(stockManagementDbContext))]
    partial class stockManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockManagementAPI.Models.Product.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdProductCategory_Id")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdProductCategory_Id = 1,
                            Price = 400.0,
                            UploadDate = new DateTime(2024, 9, 21, 14, 23, 18, 866, DateTimeKind.Local).AddTicks(3216)
                        },
                        new
                        {
                            Id = 2,
                            IdProductCategory_Id = 2,
                            Price = 200.0,
                            UploadDate = new DateTime(2024, 9, 21, 14, 23, 18, 866, DateTimeKind.Local).AddTicks(3227)
                        });
                });

            modelBuilder.Entity("StockManagementAPI.Models.Product.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductName = "ProductCategory1"
                        },
                        new
                        {
                            Id = 2,
                            ProductName = "ProductCategory2"
                        });
                });

            modelBuilder.Entity("StockManagementAPI.Models.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "schmiedvirginia@gmail.com",
                            Password = "733282373b46749e3d4bffc77efc230a224f6d244af6882bf3fde1f6f9901df9",
                            Role_Id = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "usuarioadminisitrador@gmail.com",
                            Password = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Role_Id = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "usuarioregular@gmail.com",
                            Password = "667937c3e7a68ea374716edae34173e66dc54f380cffaccceaf15dfbfad22f99",
                            Role_Id = 2
                        });
                });

            modelBuilder.Entity("StockManagementAPI.Models.User.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Rol de usuario con permisos especiales",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Rol de usuario sin permisos",
                            Name = "Regular"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
